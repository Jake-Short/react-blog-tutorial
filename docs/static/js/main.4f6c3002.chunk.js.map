{"version":3,"sources":["Pages/BlogPagesContainer/BlogPostPage/BlogPostPage.module.css","Pages/BlogPagesContainer/BlogPosts/example-blog-post/BlogPost.module.css","Pages/BlogPagesContainer/BlogPosts sync /^/.//.*//BlogPost$","Pages/BlogPagesContainer/BlogPosts/example-blog-post/BlogPost.jsx","Pages/BlogPagesContainer/BlogPosts/PostsData.jsx","Pages/BlogPagesContainer/PostsListPage/PostsListPage.jsx","Pages/BlogPagesContainer/BlogPostPage/BlogPostPage.jsx","serviceWorker.js","index.js","App.js","Pages/BlogPagesContainer/PostsListPage/PostsListPage.module.css"],"names":["module","exports","map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","BlogPost","className","styles","blogPostContainer","blogPostContainerInner","blogTitle","blogPublishDate","divider","blogPostContentLeft","blogSection","style","marginTop","sectionHeader","sectionDivider","sectionBody","React","Component","FeaturedItems","PostsListPage","featuredItems","item","index","to","postFileName","textDecoration","postCard","postCardTitle","title","postCardDescription","description","Fragment","mainContentContainer","postCardsContainer","postCardsContainerInner","BlogPostPage","require","this","props","match","params","default","history","push","Boolean","window","location","hostname","ReactDOM","render","exact","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4f6c3002.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainContentContainer\":\"BlogPostPage_mainContentContainer__3gylr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"blogPostContainer\":\"BlogPost_blogPostContainer__lvOKY\",\"blogPostContainerInner\":\"BlogPost_blogPostContainerInner__mLGqU\",\"blogTitle\":\"BlogPost_blogTitle__3UJyF\",\"blogPublishDate\":\"BlogPost_blogPublishDate__10Jvx\",\"divider\":\"BlogPost_divider__mo4ui\",\"blogPostContentLeft\":\"BlogPost_blogPostContentLeft__SKhhZ\",\"blogSection\":\"BlogPost_blogSection__vzDvS\",\"sectionHeader\":\"BlogPost_sectionHeader__2132u\",\"sectionDivider\":\"BlogPost_sectionDivider__3QjEi\",\"sectionBody\":\"BlogPost_sectionBody__1cyTr\",\"linkText\":\"BlogPost_linkText__2aTt9\",\"noMarginText\":\"BlogPost_noMarginText__Fs_Uu\"};","var map = {\n\t\"./example-blog-post/BlogPost\": 38\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 37;","import React from 'react';\nimport styles from './BlogPost.module.css';\n\nexport default class BlogPost extends React.Component {\n    render() {\n        return (\n            <div className={styles.blogPostContainer}>\n                <div className={styles.blogPostContainerInner}>\n\n                    <p className={styles.blogTitle}>Sample Title</p>\n                    <p className={styles.blogPublishDate}>March 5, 2020</p>\n                    <div className={styles.divider}></div>\n\n                    <div className={styles.blogPostContentLeft}>\n\n                        <div className={styles.blogSection} style={{ marginTop: 0 }}>\n                            <p className={styles.sectionHeader}>Learning Goal</p>\n                            <div className={styles.sectionDivider}></div>\n                            <p className={styles.sectionBody}>\n                                Sample description text.\n                            </p>\n                        </div>\n\n                        <div className={styles.blogSection}>\n                            <p className={styles.sectionHeader}>Blog post section header</p>\n                            <div className={styles.sectionDivider}></div>\n                            <p className={styles.sectionBody}>\n                                Create your first blog post now!\n                            </p>\n                        </div>\n\n                    </div>\n\n                </div>\n            </div>\n        )\n    }\n}","export const FeaturedItems = [\n    {\n        'title': 'React Blog with No Backend',\n        'description': 'Build a blog in ReactJS without any backend.',\n        'tags': ['react', 'no backend', 'javascript', 'blog'],\n        'postFileName': 'example-blog-post',\n    }\n]","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport styles from './PostsListPage.module.css';\n\n// Import blog posts\nimport { FeaturedItems } from '../BlogPosts/PostsData';\n\nexport default class PostsListPage extends React.Component {\n    render() {\n        var featuredItems = FeaturedItems.map((item, index) => {\n            return (\n                <Link to={'/blog/post/' + item.postFileName} style={{ textDecoration: 'none' }}>\n                    <div className={styles.postCard}>\n                        <p className={styles.postCardTitle}>{item.title}</p>\n                        <p className={styles.postCardDescription}>{item.description}</p>\n                    </div>\n                </Link>\n            )\n        });\n\n        return (\n            <React.Fragment>\n                <div className={styles.mainContentContainer}>\n                    {/** Show all posts here */}\n                    <div className={styles.postCardsContainer}>\n                        <div className={styles.postCardsContainerInner}>\n\n                            {featuredItems}\n\n                        </div>\n                    </div>\n                </div>\n            </React.Fragment>\n        )\n    }\n}","import React from 'react';\nimport styles from './BlogPostPage.module.css';\n\nexport default class BlogPostPage extends React.Component {\n    render() {\n        let BlogPost = null;\n\n        try {\n            BlogPost = require('../BlogPosts/' + this.props.match.params.id + '/BlogPost').default;\n        } catch {\n            this.props.history.push('/blog');\n        }\n\n        return (\n            <React.Fragment>\n                <div className={styles.mainContentContainer}>\n                    {/** Show blog post here */}\n                    <div className={styles.blogPostContainer}>\n                        {BlogPost ?\n                        <BlogPost /> : null}\n                    </div>\n                </div>\n            </React.Fragment>\n        )\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport './App.css';\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom';\n\nimport PostsListPage from './Pages/BlogPagesContainer/PostsListPage/PostsListPage';\nimport BlogPostPage from './Pages/BlogPagesContainer/BlogPostPage/BlogPostPage';\n\nexport default function App() {\n    return (\n        <Router>\n            <Switch>\n                <Route exact path=\"/\" component={PostsListPage} />\n                <Route exact path=\"/blog\" component={PostsListPage} />\n                <Route exact path=\"/blog/post/:id\" component={BlogPostPage} />\n            </Switch>\n        </Router>\n    );\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainContentContainer\":\"PostsListPage_mainContentContainer__32614\",\"postCardsContainer\":\"PostsListPage_postCardsContainer__1z5um\",\"postCardsContainerInner\":\"PostsListPage_postCardsContainerInner__3pDe_\",\"postCard\":\"PostsListPage_postCard__1tUuF\",\"postCardTitle\":\"PostsListPage_postCardTitle__X5m3d\",\"postCardDescription\":\"PostsListPage_postCardDescription__3LXXY\"};"],"sourceRoot":""}